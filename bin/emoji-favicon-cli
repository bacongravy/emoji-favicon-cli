#!/usr/bin/env node

const meow = require('meow');
const engine = require('../src');

/** @type {meow.Options} */
const options = {
  flags: {
    provider: {
      type: 'string',
      alias: 'p',
      default: 'iamcal',
    },
    destination: {
      type: 'string',
      alias: 'd',
      default: '.',
    },
    help: {
      type: 'boolean',
      alias: 'h',
      default: false,
    },
  },
};

const cli = meow(
  `
  Usage
    $ emoji-favicon-cli [<emoji-name>]

  Options
    --provider, -p     Provider to get the image from. (Default: "${options.flags.provider.default}")
                       Allowed providers: "github", "iamcal", "webfx"
    --destination, -d  Destination to save the image to. (Default: "${options.flags.destination.default}")

  Examples
    $ emoji-favicon-cli
    $ emoji-favicon-cli tada
    $ emoji-favicon-cli -d public ghost 
`,
  options,
);

const panic = (error) => {
  console.error(error);
  // eslint-disable-next-line no-process-exit
  process.exit(2);
};

const hasUnknownFlag = !Object.keys(cli.flags).every((flag) =>
  Object.keys(options.flags).includes(flag),
);

if (hasUnknownFlag) {
  const firstUnknownFlag = Object.keys(cli.flags).find(
    (flag) => !Object.keys(options.flags).includes(flag),
  );
  panic(new Error(`Unknown option '${firstUnknownFlag}'.`));
}

if (cli.input.length > 1) {
  panic(new Error('Too many arguments.'));
}

const [provider, vendor] = /** @type {String} */ (cli.flags.provider).split(
  '.',
);

if (engine.providers[provider] === undefined) {
  panic(new Error(`Provider '${provider}' not found.`));
}

const getEmoji = async () =>
  cli.input.length > 0 ? cli.input[0] : engine.interactive();

const runEngine = async (emoji) =>
  engine.providers[provider](
    emoji,
    `${cli.flags.destination}/favicon.ico`,
    vendor,
  );

getEmoji().then(runEngine).catch(panic);
