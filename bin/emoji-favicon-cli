#!/usr/bin/env node

const fs = require('fs');
const meow = require('meow');
const engine = require('../src');
const { EmojiError } = require('../src/util');

/** @type {meow.Options} */
const options = {
  flags: {
    destination: {
      type: 'string',
      alias: 'd',
      default: '.',
    },
    help: {
      type: 'boolean',
      alias: 'h',
      default: false,
    },
    vendor: {
      type: 'string',
      alias: 'v',
      default: 'google',
    },
  },
};

const cli = meow(
  `
  Usage
    $ emoji-favicon-cli [<emoji-name>]

  Options
    --vendor, -v       Vendor to get the image from. (Default: "${options.flags.vendor.default}")
    --destination, -d  Destination to save the image to. (Default: "${options.flags.destination.default}")

  Examples
    $ emoji-favicon-cli
    $ emoji-favicon-cli tada
    $ emoji-favicon-cli -v apple dancer
    $ emoji-favicon-cli -v twitter -d public ghost 
`,
  options,
);

const panic = (error) => {
  console.error(
    error instanceof EmojiError ? `Error: ${error.message}` : error,
  );
  // eslint-disable-next-line no-process-exit
  process.exit(2);
};

const hasUnknownFlag = !Object.keys(cli.flags).every((flag) =>
  Object.keys(options.flags).includes(flag),
);

if (hasUnknownFlag) {
  const firstUnknownFlag = Object.keys(cli.flags).find(
    (flag) => !Object.keys(options.flags).includes(flag),
  );
  panic(new EmojiError(`Unknown option '${firstUnknownFlag}'.`));
}

if (cli.input.length > 1) {
  panic(new EmojiError('Too many arguments.'));
}

if (!engine.vendors.includes(/** @type{string} */ (cli.flags.vendor))) {
  panic(new EmojiError(`Invalid vendor '${cli.flags.vendor}'.`));
}

const getInput = async () =>
  cli.input.length > 0 ? cli.input[0] : engine.interactive();

const writeToDestination = async (buf) =>
  fs.writeFileSync(`${cli.flags.destination}/favicon.ico`, buf);

const runEngine = async (emoji) =>
  engine.getFavicon(emoji, cli.flags.vendor).then(writeToDestination);

getInput().then(runEngine).catch(panic);
